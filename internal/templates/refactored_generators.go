package templates

import (
	"path/filepath"

	"github.com/toyz/axon/internal/models"
)

// RefactoredGenerateInterface demonstrates the new TemplateBuilder approach
func RefactoredGenerateInterface(iface models.InterfaceMetadata) (string, error) {
	// Convert methods to template data
	var methods []MethodData
	for _, method := range iface.Methods {
		var params []ParameterData
		for _, param := range method.Parameters {
			params = append(params, ParameterData{
				Name: param.Name,
				Type: param.Type,
			})
		}

		methods = append(methods, MethodData{
			Name:       method.Name,
			Parameters: params,
			Returns:    method.Returns,
		})
	}

	data := InterfaceData{
		Name:       iface.GetName(),
		StructName: iface.GetStructName(),
		Methods:    methods,
	}

	// Extract package name from package path
	packageName := filepath.Base(iface.GetPackagePath())
	header := "// Code generated by Axon framework. DO NOT EDIT.\n" +
		"// This file was automatically generated and should not be modified manually.\n\n" +
		"package " + packageName + "\n\n"

	return NewTemplateBuilder("interface").
		WithRegistryTemplate("interface-content").
		WithData(data).
		WithImports("go.uber.org/fx").
		WithHeader(header).
		Build()
}

// RefactoredGenerateInterfaceProvider demonstrates provider generation
func RefactoredGenerateInterfaceProvider(iface models.InterfaceMetadata) (string, error) {
	data := InterfaceData{
		Name:       iface.GetName(),
		StructName: iface.GetStructName(),
	}

	return NewTemplateBuilder("interface-provider").
		WithRegistryTemplate("interface-provider").
		WithData(data).
		WithModuleImport("go.uber.org/fx").
		Build()
}

// RefactoredGenerateLoggerProvider demonstrates logger provider generation
func RefactoredGenerateLoggerProvider(logger models.LoggerMetadata) (string, error) {
	// Use template utils for common conversions
	utils := DefaultTemplateUtils
	dependencies := utils.ConvertDependencies(logger.GetDependencies())
	injectedDeps := utils.FilterInjectedDependencies(dependencies)
	configParam := utils.FindConfigParam(dependencies)

	data := LoggerProviderData{
		BaseProviderData: BaseProviderData{
			StructName:   logger.GetStructName(),
			Dependencies: dependencies,
			InjectedDeps: injectedDeps,
			HasStart:     logger.HasStart,
			HasStop:      logger.HasStop,
		},
		ConfigParam: configParam,
	}

	return NewTemplateBuilder("logger-provider").
		WithRegistryTemplate("logger-provider").
		WithData(data).
		WithImports("go.uber.org/fx").
		Build()
}

// RefactoredGenerateCoreServiceProvider demonstrates service provider generation
func RefactoredGenerateCoreServiceProvider(service models.CoreServiceMetadata) (string, error) {
	utils := DefaultTemplateUtils

	// Skip generation for manual services or those with custom constructors
	if !utils.ShouldGenerateProvider(service) {
		return "", nil
	}

	dependencies := utils.ConvertDependencies(service.GetDependencies())
	injectedDeps := utils.FilterInjectedDependencies(dependencies)

	data := CoreServiceProviderData{
		BaseProviderData: BaseProviderData{
			StructName:   service.GetStructName(),
			Dependencies: dependencies,
			InjectedDeps: injectedDeps,
			HasStart:     service.HasStart,
			HasStop:      service.HasStop,
		},
		StartMode: service.GetStartMode(),
	}

	return NewTemplateBuilder("core-service-provider").
		WithRegistryTemplate("core-service-provider").
		WithData(data).
		WithImports("go.uber.org/fx", "context").
		Build()
}

// RefactoredGenerateMiddlewareProvider demonstrates middleware provider generation
func RefactoredGenerateMiddlewareProvider(middleware models.MiddlewareMetadata) (string, error) {
	utils := DefaultTemplateUtils
	dependencies := utils.ConvertDependencies(middleware.GetDependencies())
	injectedDeps := utils.FilterInjectedDependencies(dependencies)

	data := struct {
		Name         string
		StructName   string
		Dependencies []DependencyData
		InjectedDeps []DependencyData
		Parameters   map[string]interface{}
		IsGlobal     bool
		Priority     int
	}{
		Name:         middleware.GetName(),
		StructName:   middleware.GetStructName(),
		Dependencies: dependencies,
		InjectedDeps: injectedDeps,
		Parameters:   middleware.Parameters,
		IsGlobal:     middleware.IsGlobal,
		Priority:     middleware.GetPriority(),
	}

	return NewTemplateBuilder("middleware-provider").
		WithRegistryTemplate("middleware-provider").
		WithData(data).
		WithImports("go.uber.org/fx").
		Build()
}

// RefactoredGenerateRouteRegistration demonstrates complex template with multiple sections
func RefactoredGenerateRouteRegistration(data RouteRegistrationData) (string, error) {
	return NewTemplateBuilder("route-registration").
		WithRegistryTemplate("route-registration-function").
		WithData(data).
		WithImports("go.uber.org/fx", "github.com/labstack/echo/v4").
		Build()
}