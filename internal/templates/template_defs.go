// Code generated by Axon framework refactor. DO NOT EDIT manually.
// This file contains template definitions organized by functionality.

package templates

// Provider Templates - Templates for generating FX provider functions
const (
	// ProviderTemplate is the template for generating FX provider functions
	ProviderTemplate = `func New{{.StructName}}({{range $i, $dep := .InjectedDeps}}{{if $i}}, {{end}}{{$dep.Name}} {{$dep.Type}}{{end}}) *{{.StructName}} {
	return &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.FieldName}}: {{generateInitCode .Type}},
{{else}}		{{.FieldName}}: {{.Name}},
{{end}}{{end}}{{if not .Dependencies}}
{{end}}	}
}`

	// FXProviderTemplate is the template for generating FX provider functions with fx.In
	FXProviderTemplate = `func New{{.StructName}}() *{{.StructName}} {
	return &{{.StructName}}{
		
	}
}`

	// FXLifecycleProviderTemplate is the template for generating FX provider functions with fx.In and lifecycle
	FXLifecycleProviderTemplate = `func New{{.StructName}}(lc fx.Lifecycle{{range .Dependencies}}{{if not .IsInit}}, {{.Name}} {{.Type}}{{end}}{{end}}) *{{.StructName}} {
	service := &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.FieldName}}: {{generateInitCode .Type}},
{{else}}		{{.FieldName}}: {{.Name}},
{{end}}{{end}}	}
	
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return service.Start(ctx)
		},{{if .HasStop}}
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},{{end}}
	})
	
	return service
}`

	// LifecycleProviderTemplate is the template for generating FX provider functions with lifecycle management
	LifecycleProviderTemplate = `func New{{.StructName}}(lc fx.Lifecycle{{range .Dependencies}}{{if not .IsInit}}, {{.Name}} {{.Type}}{{end}}{{end}}) *{{.StructName}} {
	service := &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.FieldName}}: {{generateInitCode .Type}},
{{else}}		{{.FieldName}}: {{.Name}},
{{end}}{{end}}	}
	
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return service.Start(ctx)
		},{{if .HasStop}}
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},{{end}}
	})
	
	return service
}`

	// TransientProviderTemplate is the template for generating factory functions for transient services
	TransientProviderTemplate = `// New{{.StructName}}Factory creates a factory function for {{.StructName}} (Transient mode)
func New{{.StructName}}Factory({{range $i, $dep := .InjectedDeps}}{{if $i}}, {{end}}{{$dep.Name}} {{$dep.Type}}{{end}}) func() *{{.StructName}} {
	return func() *{{.StructName}} {
		return &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}			{{.FieldName}}: {{generateInitCode .Type}},
{{else}}			{{.FieldName}}: {{.Name}},
{{end}}{{end}}{{if not .Dependencies}}
{{end}}		}
	}
}`

	// InitProviderTemplate is the template for generating simple providers for services with -Init flag
	InitProviderTemplate = `func New{{.StructName}}({{range $i, $dep := .InjectedDeps}}{{if $i}}, {{end}}{{$dep.Name}} {{$dep.Type}}{{end}}) *{{.StructName}} {
	return &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.FieldName}}: {{generateInitCode .Type}},
{{else}}		{{.FieldName}}: {{.Name}},
{{end}}{{end}}{{if not .Dependencies}}
{{end}}	}
}`

	// InitInvokeTemplate is the template for generating invoke functions for lifecycle management
	InitInvokeTemplate = `func init{{.StructName}}Lifecycle(lc fx.Lifecycle, service *{{.StructName}}) {
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
{{if eq .StartMode "Background"}}			go func() {
				if err := service.Start(ctx); err != nil {
					log.Printf("background start error in %s: %v", "{{.StructName}}", err)
				}
			}()
			return nil
{{else}}			return service.Start(ctx)
{{end}}		},{{if .HasStop}}
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},{{end}}
	})
}`
)

// Logger Templates - Templates for generating logger provider functions
const (
	// LoggerProviderTemplate is the template for generating FX provider functions for loggers with immediate initialization
	LoggerProviderTemplate = `func New{{.StructName}}(lc fx.Lifecycle{{range .Dependencies}}{{if not .IsInit}}, {{.Name}} {{.Type}}{{end}}{{end}}) *{{.StructName}} {
	// Initialize logger immediately for fx.WithLogger to work
	var handler slog.Handler
	if {{.ConfigParam}}.LogLevel == "debug" {
		handler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelDebug,
		})
	} else {
		handler = slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelInfo,
		})
	}
	
	service := &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.FieldName}}: slog.New(handler),
{{else}}		{{.FieldName}}: {{.Name}},
{{end}}{{end}}	}
	
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return service.Start(ctx)
		},{{if .HasStop}}
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},{{end}}
	})
	
	return service
}`

	// SimpleLoggerProviderTemplate is for loggers without lifecycle hooks
	SimpleLoggerProviderTemplate = `func New{{.StructName}}({{range $i, $dep := .InjectedDeps}}{{if $i}}, {{end}}{{$dep.Name}} {{$dep.Type}}{{end}}) *{{.StructName}} {
	// Initialize logger immediately
	var handler slog.Handler
	if {{.ConfigParam}}.LogLevel == "debug" {
		handler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelDebug,
		})
	} else {
		handler = slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelInfo,
		})
	}
	
	return &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.FieldName}}: slog.New(handler),
{{else}}		{{.FieldName}}: {{.Name}},
{{end}}{{end}}	}
}`
)

// Interface Templates - Templates for generating interfaces and interface providers
const (
	// InterfaceTemplate is the template for generating interfaces from structs
	InterfaceTemplate = `// {{.Name}} is the interface for {{.StructName}}
type {{.Name}} interface {
{{range .Methods}}	{{.Name}}({{range $i, $param := .Parameters}}{{if $i}}, {{end}}{{if $param.Name}}{{$param.Name}} {{end}}{{$param.Type}}{{end}}){{if .Returns}} ({{range $i, $ret := .Returns}}{{if $i}}, {{end}}{{$ret}}{{end}}){{end}}
{{end}}}`

	// InterfaceProviderTemplate is the template for generating FX provider that casts struct to interface
	InterfaceProviderTemplate = `func New{{.Name}}(impl *{{.StructName}}) {{.Name}} {
	return impl
}`
)

// Middleware Templates - Templates for generating middleware providers and registration
const (
	// MiddlewareProviderTemplate is the template for generating FX provider functions for middleware
	MiddlewareProviderTemplate = `func New{{.StructName}}({{range $i, $dep := .InjectedDeps}}{{if $i}}, {{end}}{{$dep.Name}} {{$dep.Type}}{{end}}) *{{.StructName}} {
	return &{{.StructName}}{
{{range .Dependencies}}{{if .IsInit}}		{{.Name}}: {{generateInitCode .Type}},
{{else}}		{{.Name}}: {{.Name}},
{{end}}{{end}}	}
}`

	// GlobalMiddlewareRegistrationTemplate is the template for registering global middleware
	GlobalMiddlewareRegistrationTemplate = `// RegisterGlobalMiddleware registers all global middleware with Echo
func RegisterGlobalMiddleware(e *echo.Echo{{range .GlobalMiddlewares}}, {{toCamelCase .Name}} *{{.StructName}}{{end}}) {
{{range .GlobalMiddlewares}}	e.Use({{toCamelCase .Name}}.Handle)
{{end}}}`

	// MiddlewareRegistryTemplate is the template for middleware registry functions
	MiddlewareRegistryTemplate = `// RegisterMiddlewares registers all middleware with the axon middleware registry
func RegisterMiddlewares({{range $i, $mw := .Middlewares}}{{if $i}}, {{end}}{{toCamelCase $mw.Name}} *{{$mw.StructName}}{{end}}) {
{{range .Middlewares}}	axon.RegisterMiddlewareHandler("{{.Name}}", {{toCamelCase .Name}})
{{end}}}`
)

// Route Templates - Templates for generating route registration code
const (
	// RouteRegistrationFunctionTemplate is the template for generating the RegisterRoutes function
	RouteRegistrationFunctionTemplate = `// RegisterRoutes registers all HTTP routes with the Echo instance
func RegisterRoutes(e *echo.Echo{{range .Controllers}}, {{.VarName}} *{{.StructName}}{{end}}{{range .MiddlewareDeps}}, {{.VarName}} *{{.PackageName}}.{{.Name}}{{end}}) {
{{range .Controllers}}{{if .Prefix}}	{{.VarName}}Group := e.Group("{{.EchoPrefix}}")
{{end}}{{range .Routes}}{{template "RouteRegistration" .}}{{end}}{{end}}}`

	// RouteRegistrationTemplate is the template for individual route registration
	RouteRegistrationTemplate = `	{{.HandlerVar}} := {{.WrapperFunc}}({{.ControllerVar}})
{{if .HasMiddleware}}	{{.GroupVar}}.{{.Method}}("{{.EchoPath}}", {{.HandlerVar}}, {{.MiddlewareList}})
{{else}}	{{.GroupVar}}.{{.Method}}("{{.EchoPath}}", {{.HandlerVar}})
{{end}}	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "{{.Method}}",
		Path:                "{{.Path}}",
		EchoPath:            "{{.EchoPath}}",
		HandlerName:         "{{.HandlerName}}",
		ControllerName:      "{{.ControllerName}}",
		PackageName:         "{{.PackageName}}",
		Middlewares:         {{.MiddlewaresArray}},
		MiddlewareInstances: {{.MiddlewareInstancesArray}},
		ParameterInstances:  {{.ParameterInstancesArray}},
		Handler:             {{.HandlerVar}},
	})
`

	// MiddlewareInstanceTemplate is the template for middleware instance objects
	MiddlewareInstanceTemplate = `{
		Name:     "{{.Name}}",
		Handler:  {{.VarName}}.Handle,
		Instance: {{.VarName}},
	}`
)

// Response Handling Templates - Templates for generating response handling code
const (
	// RouteWrapperTemplate is the template for generating route wrapper functions
	RouteWrapperTemplate = `func {{.WrapperName}}(handler *{{.ControllerName}}) echo.HandlerFunc {
	return func(c echo.Context) error {
{{.ParameterBindingCode}}{{.BodyBindingCode}}
{{.ResponseHandlingCode}}
	}
}`

	// DataErrorResponseTemplate handles (data, error) return type
	DataErrorResponseTemplate = `		{{if .ErrAlreadyDeclared}}var data interface{}
		data, err = {{.HandlerCall}}{{else}}data, err := {{.HandlerCall}}{{end}}
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)`

	// ResponseErrorResponseTemplate handles (*Response, error) return type  
	ResponseErrorResponseTemplate = `		{{if .ErrAlreadyDeclared}}var response *axon.Response
		response, err = {{.HandlerCall}}{{else}}response, err := {{.HandlerCall}}{{end}}
		if err != nil {
			return handleError(c, err)
		}
		if response == nil {
			return echo.NewHTTPError(http.StatusInternalServerError, "handler returned nil response")
		}
		return handleAxonResponse(c, response)`

	// ErrorResponseTemplate handles error return type
	ErrorResponseTemplate = `		{{if .ErrAlreadyDeclared}}err = {{.HandlerCall}}{{else}}err := {{.HandlerCall}}{{end}}
		if err != nil {
			return err
		}
		return nil`

	// BodyBindingTemplate generates body parameter binding code
	BodyBindingTemplate = `		var body {{.BodyType}}
		if err := c.Bind(&body); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}
`
)

// Removed unused templates (FXLoggerAdapterTemplate, ModuleHeaderTemplate, ModuleDefinitionTemplate)
