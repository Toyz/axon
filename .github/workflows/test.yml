name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./cmd/... ./pkg/... ./internal/registry ./internal/templates

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: stable

  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v6
  #       with:
  #         version: v8.0.0
  #         args: --timeout=5m --out-format=colored-line-number

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build CLI
        run: go build -v ./cmd/axon

      - name: Test CLI help
        run: ./axon --help

      - name: Build example app
        run: |
          cd examples/complete-app
          go build -v .

  integration:
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build Axon CLI
        run: go build -o axon ./cmd/axon

      - name: Generate code for example app
        run: |
          cd examples/complete-app
          ../../axon ./internal/...

      - name: Verify generated code compiles
        run: |
          cd examples/complete-app
          go build -v .

      - name: Run example app tests
        run: |
          cd examples/complete-app
          go build -v .

  e2e:
    runs-on: ubuntu-latest
    needs: [integration]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build Axon CLI
        run: go build -o axon ./cmd/axon

      - name: Generate code for example app
        run: |
          cd examples/complete-app
          ../../axon ./internal/...

      - name: Build example app
        run: |
          cd examples/complete-app
          go build -o app .

      - name: Start example app in background
        run: |
          cd examples/complete-app
          PORT=8080 ./app &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV

          # Wait for app to start
          echo "Waiting for app to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "App is ready!"
              break
            fi
            echo "Attempt $i: App not ready yet, waiting..."
            sleep 2
          done

      - name: Test health endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health

          echo "Testing ready endpoint..."
          curl -f http://localhost:8080/ready

      - name: Test user endpoints
        run: |
          echo "Testing get all users..."
          curl -f http://localhost:8080/users

          echo "Testing get user by ID..."
          curl -f http://localhost:8080/users/1

          echo "Testing create user (should fail without auth)..."
          curl -X POST http://localhost:8080/users \
            -H "Content-Type: application/json" \
            -d '{"name":"Test User","email":"test@example.com"}' \
            -w "%{http_code}" | grep -q "401"

          echo "Testing create user with auth..."
          curl -f -X POST http://localhost:8080/users \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer valid-token" \
            -d '{"name":"Test User","email":"test@example.com"}'

      - name: Test product endpoints
        run: |
          echo "Testing get product by UUID..."
          curl -f http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000

          echo "Testing get product by custom code..."
          curl -f http://localhost:8080/products/by-code/PROD-12345

          echo "Testing get product sales by date range..."
          curl -f http://localhost:8080/products/sales/2024-01-01_2024-12-31

          echo "Testing create product in category..."
          curl -f -X POST http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000/items \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer valid-token" \
            -d '{"name":"Test Product","description":"A test product","price":99.99}'

          echo "Testing update product..."
          curl -f -X PUT http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000 \
            -H "Content-Type: application/json" \
            -d '{"name":"Updated Product","description":"Updated description","price":149.99}'

          echo "Testing delete product..."
          curl -f -X DELETE http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000

      - name: Test session endpoints (transient services)
        run: |
          echo "Testing start session..."
          curl -f -X POST http://localhost:8080/sessions/123

          echo "Testing get session info..."
          curl -f http://localhost:8080/sessions/info/123

          echo "Testing compare session instances..."
          curl -f http://localhost:8080/sessions/compare

      - name: Stop example app
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi
