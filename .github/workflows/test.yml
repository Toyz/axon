name: Tests

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -coverprofile=coverage.out ./cmd/... ./pkg/... ./internal/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: stable

  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v6
  #       with:
  #         version: v8.0.0
  #         args: --timeout=5m --out-format=colored-line-number

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build CLI
        run: go build -v ./cmd/axon

      - name: Test CLI help
        run: ./axon --help

      - name: Build example app
        run: |
          cd examples/complete-app
          ../../axon ./...
          go get ./...
          go build -v .

  integration:
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build Axon CLI
        run: go build -o axon ./cmd/axon

      - name: Generate code for example app
        run: |
          cd examples/complete-app
          ../../axon ./internal/...
          go mod tidy

      - name: Verify generated code compiles
        run: |
          cd examples/complete-app
          go build -v .

      - name: Run example app tests
        run: |
          cd examples/complete-app
          go build -v .

  e2e:
    runs-on: ubuntu-latest
    needs: [integration]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build Axon CLI
        run: go build -o axon ./cmd/axon

      - name: Generate code for example app
        run: |
          cd examples/complete-app
          ../../axon ./...
          go get ./...

      - name: Build example app
        run: |
          cd examples/complete-app
          go build -o app .

      - name: Start example app in background
        run: |
          cd examples/complete-app
          PORT=8080 ./app &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV

          # Wait for app to start
          echo "Waiting for app to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "App is ready!"
              break
            fi
            echo "Attempt $i: App not ready yet, waiting..."
            sleep 2
          done

      - name: Test health endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:8080/health

          echo "Testing ready endpoint..."
          curl -f http://localhost:8080/ready

      - name: Test user endpoints
        run: |
          echo "Testing get all users without auth (should fail)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/v1/users/)
          if [ "$HTTP_CODE" = "401" ]; then
            echo "✓ Auth middleware working - got 401 as expected"
          else
            echo "✗ Expected 401, got $HTTP_CODE"
            exit 1
          fi

          echo "Testing get all users with invalid auth (should fail)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer invalid-token" http://localhost:8080/api/v1/users/)
          if [ "$HTTP_CODE" = "401" ]; then
            echo "✓ Auth middleware working - got 401 for invalid token"
          else
            echo "✗ Expected 401 for invalid token, got $HTTP_CODE"
            exit 1
          fi

          echo "Testing get all users with valid auth..."
          curl -f -H "Authorization: Bearer valid-token" http://localhost:8080/api/v1/users/

          echo "Testing get user by ID with auth..."
          curl -f -H "Authorization: Bearer valid-token" http://localhost:8080/api/v1/users/1

          echo "Testing create user without auth (should fail)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/api/v1/users \
            -H "Content-Type: application/json" \
            -d '{"name":"Test User","email":"test@example.com"}')
          if [ "$HTTP_CODE" = "401" ]; then
            echo "✓ Auth middleware working on POST - got 401 as expected"
          else
            echo "✗ Expected 401 on POST, got $HTTP_CODE"
          fi

          echo "Testing create user with auth..."
          curl -f -X POST http://localhost:8080/api/v1/users \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer valid-token" \
            -d '{"name":"Test User","email":"test@example.com"}' || echo "Create user endpoint may not be implemented"

      - name: Test product endpoints
        run: |
          echo "Testing get product by UUID (no auth required)..."
          curl -f http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000

          echo "Testing get product by custom code with LoggingMiddleware..."
          curl -f http://localhost:8080/products/by-code/PROD-12345

          echo "Testing get product by invalid code (should fail validation)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/products/by-code/INVALID)
          if [ "$HTTP_CODE" = "400" ]; then
            echo "✓ Custom parser validation working - got 400 as expected"
          else
            echo "✗ Expected 400 for invalid code, got $HTTP_CODE"
          fi

          echo "Testing get product sales without auth (should fail)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/products/sales/2024-01-01_2024-12-31)
          if [ "$HTTP_CODE" = "401" ]; then
            echo "✓ Auth middleware working on sales endpoint - got 401 as expected"
          else
            echo "✗ Expected 401 on sales endpoint, got $HTTP_CODE"
          fi

          echo "Testing get product sales with auth..."
          curl -f http://localhost:8080/products/sales/2024-01-01_2024-12-31 \
            -H "Authorization: Bearer valid-token"

          echo "Testing create product in category without auth (should fail)..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000/items \
            -H "Content-Type: application/json" \
            -d '{"name":"Test Product","description":"A test product","price":99.99}')
          if [ "$HTTP_CODE" = "401" ]; then
            echo "✓ Auth middleware working on create product - got 401 as expected"
          else
            echo "✗ Expected 401 on create product, got $HTTP_CODE"
          fi

          echo "Testing create product in category with auth..."
          curl -f -X POST http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000/items \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer valid-token" \
            -d '{"name":"Test Product","description":"A test product","price":99.99}'

          echo "Testing update product (no auth required)..."
          curl -f -X PUT http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000 \
            -H "Content-Type: application/json" \
            -d '{"name":"Updated Product","description":"Updated description","price":149.99}'

          echo "Testing delete product (no auth required)..."
          curl -f -X DELETE http://localhost:8080/products/550e8400-e29b-41d4-a716-446655440000

      - name: Test session endpoints (transient services)
        run: |
          echo "Testing start session with LoggingMiddleware..."
          curl -f -X POST http://localhost:8080/sessions/1

          echo "Testing get session info with LoggingMiddleware..."
          curl -f http://localhost:8080/sessions/info/1

          echo "Testing compare session instances (no middleware)..."
          curl -f http://localhost:8080/sessions/compare

      - name: Stop example app
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  release:
    runs-on: ubuntu-latest
    needs: [e2e]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v ./cmd/... ./pkg/... ./internal/...

      - name: Build CLI
        run: go build -v ./cmd/axon

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
