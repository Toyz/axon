// Code generated by Axon framework. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

package controllers

import (
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"
	"go.uber.org/fx"
	"github.com/toyz/axon/pkg/axon"

	"github.com/toyz/axon/examples/complete-app/internal/services"
	"github.com/toyz/axon/examples/complete-app/internal/models"
)

func NewUserController(userService *services.UserService) *UserController {
	return &UserController{
		UserService: userService,
	}
}

func NewHealthController(databaseService *services.DatabaseService) *HealthController {
	return &HealthController{
		DatabaseService: databaseService,
	}
}

func wrapUserControllerGetAllUsers(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.GetAllUsers()
		if err != nil {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapUserControllerGetUser(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := strconv.Atoi(c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Invalid id: must be an integer")
		}

		data, err := handler.GetUser(id)
		if err != nil {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapUserControllerCreateUser(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {
		var req models.CreateUserRequest
		if err := c.Bind(&req); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
		}

		response, err := handler.CreateUser(req)
		if err != nil {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		if response == nil {
			return echo.NewHTTPError(http.StatusInternalServerError, "handler returned nil response")
		}
		return c.JSON(response.StatusCode, response.Body)
	}
}

func wrapUserControllerUpdateUser(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := strconv.Atoi(c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Invalid id: must be an integer")
		}
		var req models.UpdateUserRequest
		if err := c.Bind(&req); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
		}

		response, err := handler.UpdateUser(id, req)
		if err != nil {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		if response == nil {
			return echo.NewHTTPError(http.StatusInternalServerError, "handler returned nil response")
		}
		return c.JSON(response.StatusCode, response.Body)
	}
}

func wrapUserControllerDeleteUser(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := strconv.Atoi(c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Invalid id: must be an integer")
		}

		handlerErr := handler.DeleteUser(c, id)
		if handlerErr != nil {
			return handlerErr
		}
		return nil
	}
}

func wrapHealthControllerGetHealth(handler *HealthController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.GetHealth()
		if err != nil {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapHealthControllerGetReadiness(handler *HealthController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.GetReadiness()
		if err != nil {
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		return c.JSON(http.StatusOK, data)
	}
}

// RegisterRoutes registers all HTTP routes with the Echo instance
func RegisterRoutes(e *echo.Echo, usercontroller *UserController, healthcontroller *HealthController) {
	handler_usercontrollergetallusers := wrapUserControllerGetAllUsers(usercontroller)
	e.GET("/users", handler_usercontrollergetallusers)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/users",
		EchoPath:            "/users",
		HandlerName:         "GetAllUsers",
		ControllerName:      "UserController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollergetallusers,
	})
	handler_usercontrollergetuser := wrapUserControllerGetUser(usercontroller)
	e.GET("/users/:id", handler_usercontrollergetuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/users/{id:int}",
		EchoPath:            "/users/:id",
		HandlerName:         "GetUser",
		ControllerName:      "UserController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "int"},
		Handler:             handler_usercontrollergetuser,
	})
	handler_usercontrollercreateuser := wrapUserControllerCreateUser(usercontroller)
	e.POST("/users", handler_usercontrollercreateuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "POST",
		Path:                "/users",
		EchoPath:            "/users",
		HandlerName:         "CreateUser",
		ControllerName:      "UserController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollercreateuser,
	})
	handler_usercontrollerupdateuser := wrapUserControllerUpdateUser(usercontroller)
	e.PUT("/users/:id", handler_usercontrollerupdateuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "PUT",
		Path:                "/users/{id:int}",
		EchoPath:            "/users/:id",
		HandlerName:         "UpdateUser",
		ControllerName:      "UserController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "int"},
		Handler:             handler_usercontrollerupdateuser,
	})
	handler_usercontrollerdeleteuser := wrapUserControllerDeleteUser(usercontroller)
	e.DELETE("/users/:id", handler_usercontrollerdeleteuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "DELETE",
		Path:                "/users/{id:int}",
		EchoPath:            "/users/:id",
		HandlerName:         "DeleteUser",
		ControllerName:      "UserController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "int"},
		Handler:             handler_usercontrollerdeleteuser,
	})
	handler_healthcontrollergethealth := wrapHealthControllerGetHealth(healthcontroller)
	e.GET("/health", handler_healthcontrollergethealth)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/health",
		EchoPath:            "/health",
		HandlerName:         "GetHealth",
		ControllerName:      "HealthController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_healthcontrollergethealth,
	})
	handler_healthcontrollergetreadiness := wrapHealthControllerGetReadiness(healthcontroller)
	e.GET("/ready", handler_healthcontrollergetreadiness)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/ready",
		EchoPath:            "/ready",
		HandlerName:         "GetReadiness",
		ControllerName:      "HealthController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_healthcontrollergetreadiness,
	})
}

// AutogenModule provides all controllers and route registration in this package
var AutogenModule = fx.Module("controllers",
	fx.Provide(NewUserController),
	fx.Provide(NewHealthController),
	fx.Invoke(RegisterRoutes),
)
