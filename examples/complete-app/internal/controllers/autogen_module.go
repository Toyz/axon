// Code generated by Axon framework. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

package controllers

import (
	"net/http"
	"fmt"

	"github.com/labstack/echo/v4"
	"go.uber.org/fx"
	"github.com/toyz/axon/pkg/axon"

	"github.com/toyz/axon/examples/complete-app/internal/services"
	"github.com/toyz/axon/examples/complete-app/internal/parsers"
	"github.com/toyz/axon/examples/complete-app/internal/models"
	middleware "github.com/toyz/axon/examples/complete-app/internal/middleware"
)

type LoggingMiddleware = middleware.LoggingMiddleware
type AuthMiddleware = middleware.AuthMiddleware

// handleAxonResponse processes an axon.Response and applies headers, cookies, and content type
func handleAxonResponse(c echo.Context, response *axon.Response) error {
	// Set headers
	for key, value := range response.Headers {
		c.Response().Header().Set(key, value)
	}
	
	// Set cookies
	for _, cookie := range response.Cookies {
		httpCookie := &http.Cookie{
			Name:     cookie.Name,
			Value:    cookie.Value,
			Path:     cookie.Path,
			Domain:   cookie.Domain,
			MaxAge:   cookie.MaxAge,
			Secure:   cookie.Secure,
			HttpOnly: cookie.HttpOnly,
		}
		if cookie.SameSite != "" {
			switch cookie.SameSite {
			case "Strict":
				httpCookie.SameSite = http.SameSiteStrictMode
			case "Lax":
				httpCookie.SameSite = http.SameSiteLaxMode
			case "None":
				httpCookie.SameSite = http.SameSiteNoneMode
			}
		}
		c.SetCookie(httpCookie)
	}
	
	// Set content type and return response
	if response.ContentType != "" {
		return c.Blob(response.StatusCode, response.ContentType, []byte(fmt.Sprintf("%v", response.Body)))
	}
	return c.JSON(response.StatusCode, response.Body)
}

// handleHttpError processes an axon.HttpError and returns appropriate JSON response
func handleHttpError(c echo.Context, httpErr *axon.HttpError) error {
	return c.JSON(httpErr.StatusCode, httpErr)
}

// handleError processes any error and returns appropriate response (HttpError or generic error)
func handleError(c echo.Context, err error) error {
	if httpErr, ok := err.(*axon.HttpError); ok {
		return handleHttpError(c, httpErr)
	}
	return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
}

func NewProductController(databaseService *services.DatabaseService) *ProductController {
	return &ProductController{
		DatabaseService: databaseService,
	}
}

func NewSessionController(sessionFactory func() *services.SessionService, userService *services.UserService) *SessionController {
	return &SessionController{
		SessionFactory: sessionFactory,
		UserService: userService,
	}
}

func NewUserController(userService *services.UserService) *UserController {
	return &UserController{
		UserService: userService,
	}
}

func NewFileController() *FileController {
	return &FileController{

	}
}

func NewHealthController(databaseService *services.DatabaseService) *HealthController {
	return &HealthController{
		DatabaseService: databaseService,
	}
}

func NewIndexController() *IndexController {
	return &IndexController{

	}
}

func wrapProductControllerGetProduct(handler *ProductController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := axon.ParseUUID(c, c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid id: %v", err))
		}

		var data interface{}
		data, err = handler.GetProduct(id)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapProductControllerGetProductByCode(handler *ProductController, loggingmiddleware *LoggingMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		code, err := parsers.ParseProductCode(c, c.Param("code"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid code: %v", err))
		}

		var data interface{}
		data, err = handler.GetProductByCode(code)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = loggingmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapProductControllerGetProductSales(handler *ProductController, authmiddleware *AuthMiddleware, loggingmiddleware *LoggingMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		dateRange, err := parsers.ParseDateRange(c, c.Param("dateRange"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid dateRange: %v", err))
		}

		var data interface{}
		data, err = handler.GetProductSales(dateRange)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = loggingmiddleware.Handle(finalHandler)
	finalHandler = authmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapProductControllerCreateProductInCategory(handler *ProductController, authmiddleware *AuthMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		categoryId, err := axon.ParseUUID(c, c.Param("categoryId"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid categoryId: %v", err))
		}
		var body models.CreateProductRequest
		if err := c.Bind(&body); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}

		var data interface{}
		data, err = handler.CreateProductInCategory(c, categoryId, body)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = authmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapProductControllerUpdateProduct(handler *ProductController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := axon.ParseUUID(c, c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid id: %v", err))
		}
		var body models.UpdateProductRequest
		if err := c.Bind(&body); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}

		var data interface{}
		data, err = handler.UpdateProduct(id, body)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapProductControllerDeleteProduct(handler *ProductController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := axon.ParseUUID(c, c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid id: %v", err))
		}

		err = handler.DeleteProduct(id)
		if err != nil {
			return err
		}
		return nil
	}
}

func wrapSessionControllerStartSession(handler *SessionController, loggingmiddleware *LoggingMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		userID, err := axon.ParseInt(c, c.Param("userID"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid userID: %v", err))
		}

		var data interface{}
		data, err = handler.StartSession(userID)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = loggingmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapSessionControllerGetSessionInfo(handler *SessionController, loggingmiddleware *LoggingMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		userID, err := axon.ParseInt(c, c.Param("userID"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid userID: %v", err))
		}

		var data interface{}
		data, err = handler.GetSessionInfo(userID)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = loggingmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapSessionControllerCompareSessionInstances(handler *SessionController) echo.HandlerFunc {
	return func(c echo.Context) error {

		err := handler.CompareSessionInstances(c)
		if err != nil {
			return err
		}
		return nil
	}
}

func wrapUserControllerGetAllUsers(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.GetAllUsers()
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapUserControllerSearchUsers(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {
	query := axon.NewQueryMap(c)

		data, err := handler.SearchUsers(c, query)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapUserControllerGetUser(handler *UserController) echo.HandlerFunc {
	return func(c echo.Context) error {
		userId, err := axon.ParseInt(c, c.Param("userId"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid userId: %v", err))
		}

		var data interface{}
		data, err = handler.GetUser(userId)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapUserControllerCreateUser(handler *UserController, authmiddleware *AuthMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		var body models.CreateUserRequest
		if err := c.Bind(&body); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}

		data, err := handler.CreateUser(body)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = authmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapUserControllerUpdateUser(handler *UserController, authmiddleware *AuthMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		id, err := axon.ParseInt(c, c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid id: %v", err))
		}
		var body models.UpdateUserRequest
		if err := c.Bind(&body); err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, err.Error())
		}

		var data interface{}
		data, err = handler.UpdateUser(id, body)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = authmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapUserControllerDeleteUser(handler *UserController, authmiddleware *AuthMiddleware) echo.HandlerFunc {
	baseHandler := func(c echo.Context) error {
		id, err := axon.ParseInt(c, c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid id: %v", err))
		}

		err = handler.DeleteUser(c, id)
		if err != nil {
			return err
		}
		return nil
	}

	// Apply middlewares in order
	finalHandler := baseHandler
	finalHandler = authmiddleware.Handle(finalHandler)

	return finalHandler
}

func wrapFileControllerServeStaticFiles(handler *FileController) echo.HandlerFunc {
	return func(c echo.Context) error {
		wildcardPath, err := axon.ParseString(c, c.Param("*"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid wildcardPath: %v", err))
		}

		var data interface{}
		data, err = handler.ServeStaticFiles(c, wildcardPath)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapFileControllerUploadFile(handler *FileController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.UploadFile()
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapFileControllerGetFileInfo(handler *FileController) echo.HandlerFunc {
	return func(c echo.Context) error {
		filename, err := axon.ParseString(c, c.Param("filename"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid filename: %v", err))
		}

		var data interface{}
		data, err = handler.GetFileInfo(filename)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapHealthControllerGetHealth(handler *HealthController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.GetHealth()
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapHealthControllerGetReadiness(handler *HealthController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.GetReadiness()
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapIndexControllerIndex(handler *IndexController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.Index(c)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapIndexControllerCreate(handler *IndexController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.Create(c)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapIndexControllerShow(handler *IndexController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.Show(c)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapIndexControllerShowFish(handler *IndexController) echo.HandlerFunc {
	return func(c echo.Context) error {

		data, err := handler.ShowFish(c)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

func wrapIndexControllerShowTest(handler *IndexController) echo.HandlerFunc {
	return func(c echo.Context) error {
		id, err := axon.ParseString(c, c.Param("id"))
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid id: %v", err))
		}

		var data interface{}
		data, err = handler.ShowTest(c, id)
		if err != nil {
			return handleError(c, err)
		}
		return c.JSON(http.StatusOK, data)
	}
}

// RegisterRoutes registers all HTTP routes with the Echo instance
func RegisterRoutes(e *echo.Echo, productcontroller *ProductController, sessioncontroller *SessionController, usercontroller *UserController, filecontroller *FileController, healthcontroller *HealthController, indexcontroller *IndexController, loggingmiddleware *LoggingMiddleware, authmiddleware *AuthMiddleware) {
	handler_productcontrollergetproduct := wrapProductControllerGetProduct(productcontroller)
	e.GET("/products/:id", handler_productcontrollergetproduct)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/products/{id:UUID}",
		EchoPath:            "/products/:id",
		HandlerName:         "GetProduct",
		ControllerName:      "ProductController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "uuid.UUID"},
		Handler:             handler_productcontrollergetproduct,
	})
	handler_productcontrollergetproductbycode := wrapProductControllerGetProductByCode(productcontroller, loggingmiddleware)
	e.GET("/products/by-code/:code", handler_productcontrollergetproductbycode)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/products/by-code/{code:ProductCode}",
		EchoPath:            "/products/by-code/:code",
		HandlerName:         "GetProductByCode",
		ControllerName:      "ProductController",
		PackageName:         "controllers",
		Middlewares:         []string{"LoggingMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{{
			Name:     "LoggingMiddleware",
			Handler:  loggingmiddleware.Handle,
			Instance: loggingmiddleware,
		}},
		ParameterTypes:      map[string]string{"code": "parsers.ProductCode"},
		Handler:             handler_productcontrollergetproductbycode,
	})
	handler_productcontrollergetproductsales := wrapProductControllerGetProductSales(productcontroller, authmiddleware, loggingmiddleware)
	e.GET("/products/sales/:dateRange", handler_productcontrollergetproductsales)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/products/sales/{dateRange:DateRange}",
		EchoPath:            "/products/sales/:dateRange",
		HandlerName:         "GetProductSales",
		ControllerName:      "ProductController",
		PackageName:         "controllers",
		Middlewares:         []string{"AuthMiddleware", "LoggingMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{{
			Name:     "AuthMiddleware",
			Handler:  authmiddleware.Handle,
			Instance: authmiddleware,
		}, {
			Name:     "LoggingMiddleware",
			Handler:  loggingmiddleware.Handle,
			Instance: loggingmiddleware,
		}},
		ParameterTypes:      map[string]string{"dateRange": "parsers.DateRange"},
		Handler:             handler_productcontrollergetproductsales,
	})
	handler_productcontrollercreateproductincategory := wrapProductControllerCreateProductInCategory(productcontroller, authmiddleware)
	e.POST("/products/:categoryId/items", handler_productcontrollercreateproductincategory)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "POST",
		Path:                "/products/{categoryId:UUID}/items",
		EchoPath:            "/products/:categoryId/items",
		HandlerName:         "CreateProductInCategory",
		ControllerName:      "ProductController",
		PackageName:         "controllers",
		Middlewares:         []string{"AuthMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{{
			Name:     "AuthMiddleware",
			Handler:  authmiddleware.Handle,
			Instance: authmiddleware,
		}},
		ParameterTypes:      map[string]string{"categoryId": "uuid.UUID"},
		Handler:             handler_productcontrollercreateproductincategory,
	})
	handler_productcontrollerupdateproduct := wrapProductControllerUpdateProduct(productcontroller)
	e.PUT("/products/:id", handler_productcontrollerupdateproduct)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "PUT",
		Path:                "/products/{id:UUID}",
		EchoPath:            "/products/:id",
		HandlerName:         "UpdateProduct",
		ControllerName:      "ProductController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "uuid.UUID"},
		Handler:             handler_productcontrollerupdateproduct,
	})
	handler_productcontrollerdeleteproduct := wrapProductControllerDeleteProduct(productcontroller)
	e.DELETE("/products/:id", handler_productcontrollerdeleteproduct)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "DELETE",
		Path:                "/products/{id:UUID}",
		EchoPath:            "/products/:id",
		HandlerName:         "DeleteProduct",
		ControllerName:      "ProductController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "uuid.UUID"},
		Handler:             handler_productcontrollerdeleteproduct,
	})
	handler_sessioncontrollerstartsession := wrapSessionControllerStartSession(sessioncontroller, loggingmiddleware)
	e.POST("/sessions/:userID", handler_sessioncontrollerstartsession)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "POST",
		Path:                "/sessions/{userID:int}",
		EchoPath:            "/sessions/:userID",
		HandlerName:         "StartSession",
		ControllerName:      "SessionController",
		PackageName:         "controllers",
		Middlewares:         []string{"LoggingMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{{
			Name:     "LoggingMiddleware",
			Handler:  loggingmiddleware.Handle,
			Instance: loggingmiddleware,
		}},
		ParameterTypes:      map[string]string{"userID": "int"},
		Handler:             handler_sessioncontrollerstartsession,
	})
	handler_sessioncontrollergetsessioninfo := wrapSessionControllerGetSessionInfo(sessioncontroller, loggingmiddleware)
	e.GET("/sessions/info/:userID", handler_sessioncontrollergetsessioninfo)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/sessions/info/{userID:int}",
		EchoPath:            "/sessions/info/:userID",
		HandlerName:         "GetSessionInfo",
		ControllerName:      "SessionController",
		PackageName:         "controllers",
		Middlewares:         []string{"LoggingMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{{
			Name:     "LoggingMiddleware",
			Handler:  loggingmiddleware.Handle,
			Instance: loggingmiddleware,
		}},
		ParameterTypes:      map[string]string{"userID": "int"},
		Handler:             handler_sessioncontrollergetsessioninfo,
	})
	handler_sessioncontrollercomparesessioninstances := wrapSessionControllerCompareSessionInstances(sessioncontroller)
	e.GET("/sessions/compare", handler_sessioncontrollercomparesessioninstances)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/sessions/compare",
		EchoPath:            "/sessions/compare",
		HandlerName:         "CompareSessionInstances",
		ControllerName:      "SessionController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_sessioncontrollercomparesessioninstances,
	})
	usercontrollerGroup := e.Group("/api/v1/users/:userId")
	usercontrollerGroup.Use(authmiddleware.Handle)
	handler_usercontrollergetallusers := wrapUserControllerGetAllUsers(usercontroller)
	usercontrollerGroup.GET("/", handler_usercontrollergetallusers)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "GET",
		Path:           "/api/v1/users/{userId:int}/",
		EchoPath:       "/api/v1/users/:userId/",
		HandlerName:    "GetAllUsers",
		ControllerName: "UserController",
		PackageName:    "controllers",
		Middlewares:    []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollergetallusers,
	})
	handler_usercontrollersearchusers := wrapUserControllerSearchUsers(usercontroller)
	usercontrollerGroup.GET("/search", handler_usercontrollersearchusers)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "GET",
		Path:           "/api/v1/users/{userId:int}/search",
		EchoPath:       "/api/v1/users/:userId/search",
		HandlerName:    "SearchUsers",
		ControllerName: "UserController",
		PackageName:    "controllers",
		Middlewares:    []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollersearchusers,
	})
	handler_usercontrollergetuser := wrapUserControllerGetUser(usercontroller)
	usercontrollerGroup.GET("/profile", handler_usercontrollergetuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "GET",
		Path:           "/api/v1/users/{userId:int}/profile",
		EchoPath:       "/api/v1/users/:userId/profile",
		HandlerName:    "GetUser",
		ControllerName: "UserController",
		PackageName:    "controllers",
		Middlewares:    []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollergetuser,
	})
	handler_usercontrollercreateuser := wrapUserControllerCreateUser(usercontroller, authmiddleware)
	usercontrollerGroup.POST("/users", handler_usercontrollercreateuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "POST",
		Path:           "/api/v1/users/{userId:int}/users",
		EchoPath:       "/api/v1/users/:userId/users",
		HandlerName:    "CreateUser",
		ControllerName: "UserController",
		PackageName:    "controllers",
		Middlewares:    []string{"AuthMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollercreateuser,
	})
	handler_usercontrollerupdateuser := wrapUserControllerUpdateUser(usercontroller, authmiddleware)
	usercontrollerGroup.PUT("/users/:id", handler_usercontrollerupdateuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "PUT",
		Path:           "/api/v1/users/{userId:int}/users/{id:int}",
		EchoPath:       "/api/v1/users/:userId/users/:id",
		HandlerName:    "UpdateUser",
		ControllerName: "UserController",
		PackageName:    "controllers",
		Middlewares:    []string{"AuthMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollerupdateuser,
	})
	handler_usercontrollerdeleteuser := wrapUserControllerDeleteUser(usercontroller, authmiddleware)
	usercontrollerGroup.DELETE("/users/:id", handler_usercontrollerdeleteuser)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "DELETE",
		Path:           "/api/v1/users/{userId:int}/users/{id:int}",
		EchoPath:       "/api/v1/users/:userId/users/:id",
		HandlerName:    "DeleteUser",
		ControllerName: "UserController",
		PackageName:    "controllers",
		Middlewares:    []string{"AuthMiddleware"},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_usercontrollerdeleteuser,
	})
	filecontrollerGroup := e.Group("/files")
	handler_filecontrollerservestaticfiles := wrapFileControllerServeStaticFiles(filecontroller)
	filecontrollerGroup.GET("/{*}", handler_filecontrollerservestaticfiles)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "GET",
		Path:           "/{*}",
		EchoPath:       "/{*}",
		HandlerName:    "ServeStaticFiles",
		ControllerName: "FileController",
		PackageName:    "controllers",
		Middlewares:    []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_filecontrollerservestaticfiles,
	})
	handler_filecontrolleruploadfile := wrapFileControllerUploadFile(filecontroller)
	filecontrollerGroup.POST("/upload", handler_filecontrolleruploadfile)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "POST",
		Path:           "/files/upload",
		EchoPath:       "/files/upload",
		HandlerName:    "UploadFile",
		ControllerName: "FileController",
		PackageName:    "controllers",
		Middlewares:    []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_filecontrolleruploadfile,
	})
	handler_filecontrollergetfileinfo := wrapFileControllerGetFileInfo(filecontroller)
	filecontrollerGroup.GET("/finfo/:filename", handler_filecontrollergetfileinfo)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:         "GET",
		Path:           "/files/finfo/{filename:string}",
		EchoPath:       "/files/finfo/:filename",
		HandlerName:    "GetFileInfo",
		ControllerName: "FileController",
		PackageName:    "controllers",
		Middlewares:    []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_filecontrollergetfileinfo,
	})
	handler_healthcontrollergethealth := wrapHealthControllerGetHealth(healthcontroller)
	e.GET("/health", handler_healthcontrollergethealth)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/health",
		EchoPath:            "/health",
		HandlerName:         "GetHealth",
		ControllerName:      "HealthController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_healthcontrollergethealth,
	})
	handler_healthcontrollergetreadiness := wrapHealthControllerGetReadiness(healthcontroller)
	e.GET("/ready", handler_healthcontrollergetreadiness)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/ready",
		EchoPath:            "/ready",
		HandlerName:         "GetReadiness",
		ControllerName:      "HealthController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_healthcontrollergetreadiness,
	})
	handler_indexcontrollerindex := wrapIndexControllerIndex(indexcontroller)
	e.GET("/", handler_indexcontrollerindex)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/",
		EchoPath:            "/",
		HandlerName:         "Index",
		ControllerName:      "IndexController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_indexcontrollerindex,
	})
	handler_indexcontrollercreate := wrapIndexControllerCreate(indexcontroller)
	e.POST("/", handler_indexcontrollercreate)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "POST",
		Path:                "/",
		EchoPath:            "/",
		HandlerName:         "Create",
		ControllerName:      "IndexController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_indexcontrollercreate,
	})
	handler_indexcontrollershow := wrapIndexControllerShow(indexcontroller)
	e.GET("/:id", handler_indexcontrollershow)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/{id:string}",
		EchoPath:            "/:id",
		HandlerName:         "Show",
		ControllerName:      "IndexController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_indexcontrollershow,
	})
	handler_indexcontrollershowfish := wrapIndexControllerShowFish(indexcontroller)
	e.GET("/:id/fish", handler_indexcontrollershowfish)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/{id}/fish",
		EchoPath:            "/:id/fish",
		HandlerName:         "ShowFish",
		ControllerName:      "IndexController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{},
		Handler:             handler_indexcontrollershowfish,
	})
	handler_indexcontrollershowtest := wrapIndexControllerShowTest(indexcontroller)
	e.GET("/:id/test", handler_indexcontrollershowtest)
	axon.DefaultRouteRegistry.RegisterRoute(axon.RouteInfo{
		Method:              "GET",
		Path:                "/{id:string}/test",
		EchoPath:            "/:id/test",
		HandlerName:         "ShowTest",
		ControllerName:      "IndexController",
		PackageName:         "controllers",
		Middlewares:         []string{},
		MiddlewareInstances: []axon.MiddlewareInstance{},
		ParameterTypes:      map[string]string{"id": "string"},
		Handler:             handler_indexcontrollershowtest,
	})
}

// AutogenModule provides all controllers and route registration in this package
var AutogenModule = fx.Module("controllers",
	fx.Provide(NewProductController),
	fx.Provide(NewSessionController),
	fx.Provide(NewUserController),
	fx.Provide(NewFileController),
	fx.Provide(NewHealthController),
	fx.Provide(NewIndexController),
	fx.Invoke(RegisterRoutes),
)
