// Code generated by Axon framework. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

package services

import (
	"context"

	"go.uber.org/fx"

	"github.com/toyz/axon/examples/complete-app/internal/config"
)

// CrawlerServiceInterface is the interface for CrawlerService
type CrawlerServiceInterface interface {
	Start(ctx context.Context) (error)
	Stop(ctx context.Context) (error)
}

func NewCrawlerService() *CrawlerService {
	return &CrawlerService{

	}
}

func initCrawlerServiceLifecycle(lc fx.Lifecycle, service *CrawlerService) {
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			go func() {
				if err := service.Start(ctx); err != nil {
					// Log error or handle as needed
					// Note: Background start errors cannot be returned to FX
				}
			}()
			return nil
		},
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},
	})
}

func NewDatabaseService(Config *config.Config) *DatabaseService {
	return &DatabaseService{
		Config: Config,
	}
}

func initDatabaseServiceLifecycle(lc fx.Lifecycle, service *DatabaseService) {
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return service.Start(ctx)
		},
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},
	})
}

// NewSessionServiceFactory creates a factory function for SessionService (Transient mode)
func NewSessionServiceFactory(DatabaseService *DatabaseService) func() *SessionService {
	return func() *SessionService {
		return &SessionService{
			DatabaseService: DatabaseService,
		}
	}
}

func NewUserService(Config *config.Config) *UserService {
	return &UserService{
		Config: Config,
	}
}

func initUserServiceLifecycle(lc fx.Lifecycle, service *UserService) {
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			return service.Start(ctx)
		},
		OnStop: func(ctx context.Context) error {
			return service.Stop(ctx)
		},
	})
}

func NewCrawlerServiceInterface(impl *CrawlerService) CrawlerServiceInterface {
	return impl
}

// AutogenModule provides all core services in this package
var AutogenModule = fx.Module("services",
	fx.Provide(NewCrawlerService),
	fx.Invoke(initCrawlerServiceLifecycle),
	fx.Provide(NewDatabaseService),
	fx.Invoke(initDatabaseServiceLifecycle),
	fx.Provide(NewSessionServiceFactory),
	fx.Provide(NewUserService),
	fx.Invoke(initUserServiceLifecycle),
	fx.Provide(NewCrawlerServiceInterface),
)
