// Code generated by Axon framework. DO NOT EDIT.
// This file was automatically generated and should not be modified manually.

package logging

import (
	"log/slog"
	"os"

	"go.uber.org/fx"
	"go.uber.org/fx/fxevent"

	"github.com/toyz/axon/examples/simple-app/internal/config"
)

// fxLogger adapts AppLogger to fxevent.Logger
type fxLogger struct {
	logger *AppLogger
}

func (l *fxLogger) LogEvent(event fxevent.Event) {
	switch e := event.(type) {
	case *fxevent.OnStartExecuting:
		l.logger.Info("OnStart hook executing", "callee", e.FunctionName, "caller", e.CallerName)
	case *fxevent.OnStartExecuted:
		if e.Err != nil {
			l.logger.Error("OnStart hook failed", "callee", e.FunctionName, "caller", e.CallerName, "error", e.Err)
		} else {
			l.logger.Info("OnStart hook executed", "callee", e.FunctionName, "caller", e.CallerName, "runtime", e.Runtime)
		}
	case *fxevent.OnStopExecuting:
		l.logger.Info("OnStop hook executing", "callee", e.FunctionName, "caller", e.CallerName)
	case *fxevent.OnStopExecuted:
		if e.Err != nil {
			l.logger.Error("OnStop hook failed", "callee", e.FunctionName, "caller", e.CallerName, "error", e.Err)
		} else {
			l.logger.Info("OnStop hook executed", "callee", e.FunctionName, "caller", e.CallerName, "runtime", e.Runtime)
		}
	case *fxevent.Supplied:
		l.logger.Debug("supplied", "type", e.TypeName, "module", e.ModuleName)
	case *fxevent.Provided:
		l.logger.Debug("provided", "constructor", e.ConstructorName, "module", e.ModuleName)
	case *fxevent.Invoking:
		l.logger.Debug("invoking", "function", e.FunctionName, "module", e.ModuleName)
	case *fxevent.Invoked:
		if e.Err != nil {
			l.logger.Error("invoke failed", "error", e.Err, "stack", e.Trace, "function", e.FunctionName, "module", e.ModuleName)
		} else {
			l.logger.Debug("invoked", "function", e.FunctionName, "module", e.ModuleName)
		}
	case *fxevent.Stopping:
		l.logger.Info("received signal", "signal", e.Signal)
	case *fxevent.Stopped:
		if e.Err != nil {
			l.logger.Error("stop failed", "error", e.Err)
		} else {
			l.logger.Info("stopped")
		}
	case *fxevent.RollingBack:
		l.logger.Error("start failed, rolling back", "error", e.StartErr)
	case *fxevent.RolledBack:
		if e.Err != nil {
			l.logger.Error("rollback failed", "error", e.Err)
		} else {
			l.logger.Info("rolled back")
		}
	case *fxevent.Started:
		if e.Err != nil {
			l.logger.Error("start failed", "error", e.Err)
		} else {
			l.logger.Info("started")
		}
	case *fxevent.LoggerInitialized:
		if e.Err != nil {
			l.logger.Error("custom logger initialization failed", "error", e.Err)
		} else {
			l.logger.Debug("initialized custom fxevent.Logger", "function", e.ConstructorName)
		}
	}
}

func NewAppLogger(config *config.Config) *AppLogger {
	// Initialize logger immediately
	var handler slog.Handler
	if config.LogLevel == "debug" {
		handler = slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelDebug,
		})
	} else {
		handler = slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
			Level: slog.LevelInfo,
		})
	}
	
	return &AppLogger{
		Config: config,
		logger: slog.New(handler),
	}
}

// AutogenModule provides all core services in this package
var AutogenModule = fx.Module("logging",
	fx.WithLogger(func(logger *AppLogger) fxevent.Logger {
		return &fxLogger{logger: logger}
	}),
	fx.Provide(NewAppLogger),
)
